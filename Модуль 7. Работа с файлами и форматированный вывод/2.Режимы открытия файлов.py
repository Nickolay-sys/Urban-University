"""
На сегодняшнем занятии мы научимся открывать файлы. Для того чтобы открывать файлы, нам необходимо иметь какой-нибудь файл в наличии. 
Поэтому мы заранее подготовили обычный текстовый файл, который назвали «sample» и записали туда 4 строчки абсолютно бессмысленного текста, 
и файл Python, в котором мы будем писать код и попытаемся считать содержимое этого файла.

Для начала давайте с вами определимся: по сути, файл точно также является последовательностью байтов, хранящихся на диске компьютера. 
Помимо всего прочего, файл по своей структуре или принципу работы с файлом очень похож на списки или строки. 
Он точно также является итерируемым объектом, то есть тем, у которого можно перебирать значения. 
Для того чтобы работать с файлом, давайте воспользуемся стандартным пакетом Python и импортируем функцию «pprint» из него.
"""

from pprint import pprint

"""
Эта функция «pprint» позволяет нам делать вывод в терминал более человечным или более удобно читаемым. 
Это особенно видно, когда вы работаете с какими-то многоуровневыми структурами данных. Но мы воспользуемся этим для работы с файлом.

Первой функцией, которая нам поможет открывать файлы, будет являться функция «open». 
Она тоже является встроенной функцией в Python, и для её корректного выполнения нам понадобится файл. 
Мы предлагаем создать переменную «name» с именем файла, куда мы запишем полностью название текстового файла.
Обратите внимание, что название мы указываем с расширением, то есть «.txt».
"""

name = 'sample.txt'

"""
Следующее, что нам понадобится сделать, это воспользоваться функцией «open». 
Однако мы хотим считать содержимое файла, поэтому результат работы этой функции мы сохраним в переменную. 
Давайте создадим переменную «file» и в ней воспользуемся функцией «open», куда передаётся имя файла и ещё перечень необязательных параметров. 
Но раз у нас урок сегодня про режимы открытия, поэтому давайте явно укажем здесь в кавычках буковку «r».
"""

file = open(name, 'r')      # r - read, w - write, a - append

"""
Что это значит? Режима открытия у нас 3: «r», «w» и «a». «R»-это чтение от слова «read», «w»-это «write» от слова записать, 
запись и «а»-это «append» добавление. Нам достаточно запомнить их 3. По их названию можно догадаться, что они выполняют. 
Поэтому, если забудете, но вспомните эту подсказку, будет понятно, какой режим вам нужен.

Есть несколько нюансов: режимы крайне ограничены в том, что мы с вами можем сделать с файлом. 
Например, работая в «Word», может быть в «XL», в каком-то определённом действии, может быть, при попытке удалить файл, 
либо изменить какой-то текстовый файл на компьютере, вы встречали предупреждение, что файл открыт только для чтения. 
Здесь логика примерно та же: раз мы открываем файл в режиме чтения, нам доступно только ознакомление с содержимым этого файла. 
Нужно запомнить, что работа с файлом делится на 3 этапа:
    1. открыли файл;
    2. выполнили действие;
    3. закрыли файл.

Файл мы открыли. Что мы хотим выполнить? Для начала посмотрим, что у нас находится в этой переменной «file». 
Запустим и видим специальный объект «TextIOWrapper», имя файла, режим открытия и кодировка «cp1252». 
Эта кодировка устанавливается по умолчанию при открытии файлов.
"""

print(file)

"""
Но все это не даёт нам содержимое файла. Чтобы считать содержимое файла, нам нужно воспользоваться «read» методом.
Давайте воспользуемся функцией «pprint», возьмём наш файл и выберем метод «read». Запустили, увидели текст.
Обратите внимание на то, что внутри каждой строки есть символ переноса на новую строку, в самом конце файла. 
То есть, если вам нужно изменять его содержимое, помните, что эти символы имеют место быть. Они не просто так переносятся на следующую строчку.
"""

pprint(file.read())

"""
Мы считали содержимое. Следующим правильным действием будет являться закрытие файла. 
Запускаем. На работу это не повлияло, но для будущих действий мы себя обезопасили.
"""

file.close()

"""
Зачем нужно закрывать файл? Здесь причин на самом деле много. 
Основные причины можно выделить в том, что некоторые изменения, выполняемые с файлом, не всегда сохраняются. 
То есть они могут сохраниться только после того, как файл будет закрыт. 
Ещё одна из причин это, если файл не будет закрыт, это будет препятствовать работе сборщика мусора. 
Помимо всего прочего, у операционной системы есть некий лимит на количество открытых таким образом файлов. 
И рано или поздно, если мы не будем закрывать файлы, у нас, соответственно, этот лимит будет достигнут и новые файлы мы с вами не сможем открывать. 
Поэтому просто после выполнения всех действий обязательно закрываем файл.

Что это даёт? Получается, если мы захотим ещё раз обратиться к нашему файлу и воспользоваться методом «read», 
чтобы считать информацию, мы получим ошибку, что пытаемся выполнить какую-то операцию на закрытом файле.
"""

# pprint(file.read())

"""
С чтением все понятно. Но что, если мы хотим записать что-то в этот файл? 
Для того чтобы записать файл, нам нужно использовать другой режим: не чтение, а запись, то есть «w». 
И здесь есть несколько нюансов: когда мы открываем файл для записи, то есть используя «w» как режим открытия, 
у нас при каждом запуске программы файл будет полностью перезаписываться. 
То есть текст, который мы захотим записать, встанет вместо текста, который был в этом файле ранее. 
И это не есть хорошо. Мы бы не хотели потерять содержимое этого файла, поэтому мы просто изменим название. 
Не переживайте, когда мы используем режим записи, если интерпретатор не найдёт файл с похожим названием, он просто создаст новый. 
По факту мы создадим файл «sample2.txt».

И чтобы что-то записать, нам нужно использовать метод «write» для записи и потом таким же образом закрыть файл.
"""

name = 'sample2.txt'
file = open(name, 'w')
file.write('hello')
file.close()

"""
Запускаем, процесс выполнен. Видим то, что появился «sample2.txt» и текст «hello world».

Давайте мы этот текст изменим, напишем просто «hello», запустим. И зайдем снова в «sample2.txt», текст полностью изменился.
Это значит то, что у нас файл действительно перезаписывается с каждым запуском программы.

Если мы захотим считать файл, воспользуемся «read» и запустим, то увидим, что у нас данный файл не читабелен, потому что он открыт в режиме записи.
"""

# file.read()
# file.close()

"""
Если мы захотим добавить текст к существующему, как быть? Чтобы добавить текст к уже существующему тексту, нам нужен третий режим.
Это «append». Мы точно также можем воспользоваться методом «write». 
Однако результат работы данного метода в случае с режимом «append» он не будет перезаписывать файл, а просто добавлять к существующему тексту новый.
Запустим, появился «hello world».
"""

name = 'sample2.txt'
file = open(name, 'a')
file.write(' hello world')
file.close()

"""
Сделаем «hello world 2», запустим ещё раз. 
Видим, что новый текст просто прилип к старому, поэтому мы обратили внимание на символы переноса на новую строку. 
Если мы хотим грамотно работать с нашим файлом, нужно такие моменты учитывать.
"""

name = 'sample2.txt'
file = open(name, 'a')
file.write('\nhello world 2')
file.close()

"""
По основным режимам это все. Нам нужно запомнить их 3. Однако их гораздо больше. 
Если обратиться к документации, посмотреть на функцию «open», можно увидеть гораздо больше режимов. 
Есть «+», который открывает файл для обновления, то есть чтения и записи.

Прочитав эту документацию, можно получить некую информацию о том, как же лучше работать с файлом и какой режим использовать. 
Всех их помнить и держать в голове необязательно.
Есть также комбинированные режимы, то есть несколько букв вместе. Но запомнить стоит эти 3 основных режима «r», «w» и «а».
Если файл является бинарным, такие файлы тоже бывают, в основном легко просто добавить буковку «b». Например, «ab», «rb», «wb» и так далее.

Мы с вами научились открывать файл, считывать содержимое и добавлять, то есть изменять содержимое нашего файла.
Почему мы сказали, что файл по принципам работы схож со строками или со списками? 
Дело в том, что когда мы открываем файл, у нас появляется некий невидимый курсор. 
Давайте это продемонстрируем, то есть откроем в режиме чтения и воспользуемся «file.read» для того, чтобы считать содержимое.

Давайте выведем для нашего файла этот курсор. Метод «tell» возвращает нам положение курсора в нашем файле.
И мы видим 0. То есть курсор сейчас находится в самом начале нашего файла.
"""

name = 'sample2.txt'
file = open(name, 'r')
print(file.tell())
pprint(file.read())

"""
Однако после чтения он встал на 32 место.
"""
print(file.tell())

"""
Если мы повторно захотим считать содержимое файла, то получим уже пустую строку, потому что этот курсор передвинулся в самый конец.
"""

pprint(file.read())

"""
Если нам необходимо вносить изменения в какие-то кусочки кода, нам нужно насильно передвинуть этот курсор «своими руками».
Чтобы это сделать вместо «tell» (мы уже убедились, что он действительно прыгает в конец) воспользуемся методом «seek». 
Еще указывается сдвиг, куда его нужно передвинуть. Раз у нас 32, попытаемся разделить это на 2, возьмём 16. 
Запустим и видим, что после того, как мы передвинули курсор на позицию 16, последующее его чтение началось с символа «h». 
Таким образом, можно контролировать то, куда мы будем вносить изменения
"""

print(file.seek(16))
pprint(file.read())
file.close()

"""
На этом наше знакомство с режимами заканчивается, всем успехов!
"""