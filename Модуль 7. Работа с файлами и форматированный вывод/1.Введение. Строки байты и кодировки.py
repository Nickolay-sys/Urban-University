"""
Некоторые проблемы могу  возникнуть на этапе чтения файлов. Для того чтобы с быть готовым к ним стоит расмотреть 
    как происходит чтение файлов.
Если написать print('hello') то выйдет строка 'hello'
"""

print('hello')

"""
Но изначально компьютер не понимает эти символы. Для каждого символа есть свой номер через который компютер понимает 
    о каком символе идёт речь. Называется одна из кодировок - ASCII. Она содержит в себе символы от 0 до 127.
    Для того чтобы вывести кодировку символа используется функция ord(). У прописных и заглавных букв разные кодировки
"""

print(ord('a'))
print(ord('A'))
print(ord('h'))
print(ord('e'))

"""
Работа с номерами символов происходит в том же порядке как и с переменными 
"""

a ='hello'
chars = []
for i in a:
    chars.append(ord(i))
print(chars)

"""
Функцией chr() можно номер перевести обратно в символ
"""

s = ''
for i in chars:
    s += chr(i)
print(s)
    
"""
Выведем таблицу ASCII
"""    

for i in range(32, 128):
    print(chr(i), end=' ')
    if (i - 1) % 10 == 0:
        print()
"""
Python же придерживается кодировки Unicode, похожей на ASCII. но содержащей в себе более 2000000. Принцип работы тот же символ-значение
"""
print('\n')
for i in range(1000, 1200):
    print(chr(i), end=' ')
    if (i - 1) % 10 == 0:
        print()
    
"""
Байтовые строки - это строки, которые содержат непреобразованые байты
Используются при необходимости работы сбинарными данными
Выглядят они как обычные строки, но с префиксом 'b' перед строкой
"""
print('\n')
print(ord('h'), hex(ord('h')))

bb = b'\x68'
print(type(bb))

"""
Теперь воспользуемся функцией «decode». И уже на выходе мы с вами получим «h», тот самый символ (Рис.17).
"""

print(bb.decode())